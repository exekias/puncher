#!/usr/bin/env python
# encoding: utf-8
import keyring
import re
import os
import sys
import requests
import configobj
import getpass
import threading

class bcolors:
    HEADER = '\033[1m\033[95m'
    OKBLUE = '\033[94m'
    OKGREEN = '\033[1m\033[92m'
    FAIL = '\033[1m\033[91m'
    ENDC = '\033[0m'


class Puncher(object):
    APP_NAME = 'ttzentyal puncher'
    APP_NAME_TTZENTYAL = "Zentyal Time Tracker"
    BASE_URL = 'https://tt.zentyal.com'
    ROUTES = {'punch-in': '/timetracking/punch/punch_in',
              'punch-out': '/timetracking/punch/punch_out',
              'punch': '/timetracking/punch',
              'hq': '/timetracking/hq',
              'adage-up': '/timetracking/adage/up',
              'adage-down': '/timetracking/adage/down'}

    def __init__(self):
        self._get_username()
        self._get_password()

    def _get_username(self):
        conf_file_punch = config_file = os.path.join(os.environ['HOME'], '.ttpuncher')
        if not os.path.exists(config_file):
            config_file = os.path.join(os.environ['HOME'], '.ttzentyal')
        try:
            conf_obj = configobj.ConfigObj(config_file, encoding='UTF8')
            self.username = conf_obj["username"]
        except:
            print ("You need to create a %s file and define username key, something like:\n"
                   "username=jconnor" % conf_file_punch)
            sys.exit(1)

    def _get_password(self):
        self.password = keyring.get_password(self.APP_NAME, self.username)
        if not self.password:
            self.password = keyring.get_password(self.APP_NAME_TTZENTYAL, self.username)
        if not self.password:
            self.password = getpass.getpass(prompt=("Password for %s: " % self.username))
            keyring.set_password(self.APP_NAME, self.username, self.password)

    def punch_in(self):
        body = self._get('punch-in')
        if self.ROUTES['punch-out'] not in body:
            raise RuntimeError("Punch in failed")

        return self.working_info(body)

    def punch_out(self):
        body = self._get('punch-out')
        if self.ROUTES['punch-in'] not in body:
            raise RuntimeError("Punch out failed")

        return self.working_info(body)

    def vote_up(self):
        body = self._post('adage-up')

    def vote_down(self):
        body = self._post('adage-down')

    def people_working(self):
        body = self._get('hq')
        name_re = re.compile(r"<td>([^0-9]*)</td>")
        ret = []
        for line in body.split("\n"):
            name = name_re.search(line)
            if name:
                ret.append(name.group(1))
        return ret

    def working_info(self, body=None):
        """
        Return a tuple of:
          - Today worked hours
          - Week worked hours
          - Punched_in (boolean)
          - adage message
          - adage creator
          - adage author
          - adage votes
          - adage karma
        """
        if body is None:
            body = self._get('punch')

        day_re = re.compile(r"d.a[^0-9]*([0-9]+:[0-9]+)")
        week_re = re.compile(r"semana[^0-9]*([0-9]+:[0-9]+)")
        day = day_re.search(body)
        week = week_re.search(body)

        day = day.group(1) if day else '?'
        week = week.group(1) if week else '?'

        is_punched_in = self.ROUTES['punch-out'] in body

        adage_message = re.search(r"<pre class=\"adage_message\">(.*)</pre>", body, re.MULTILINE|re.DOTALL)
        adage_creator = re.search(r"<p class=\"adage_creator\">(.*)</p>", body)
        adage_author = re.search(r"<p class=\"adage_author\">(.*)</p>", body)
        adage_votes = re.search(r"Votos: (.*)", body)
        adage_karma = re.search(r"Karma: (.*)", body)

        adage_message = adage_message.group(1) if adage_message else '?'
        adage_creator = adage_creator.group(1) if adage_creator else '?'
        adage_author = adage_author.group(1) if adage_author else '?'
        adage_votes = adage_votes.group(1) if adage_votes else '?'
        adage_karma = adage_karma.group(1) if adage_karma else '?'

        return (day, week, is_punched_in, adage_message,
                adage_creator, adage_author, adage_votes, adage_karma)

    def _get(self, route):
        return requests.get(self.BASE_URL + self.ROUTES[route],
                            auth=(self.username, self.password)).text

    def _post(self, route):
        return requests.post(self.BASE_URL + self.ROUTES[route],
                            auth=(self.username, self.password)).text


def print_people_working(people_working):
    print bcolors.HEADER + "People working"
    print "==============" + bcolors.ENDC + bcolors.OKBLUE
    for person in people_working:
        print person
    print bcolors.ENDC

def print_working_info(working_info):
    print bcolors.OKBLUE + "Today hours: " + bcolors.OKGREEN + working_info[0] + bcolors.ENDC
    print bcolors.OKBLUE + "Week hours: " + working_info[1] + bcolors.ENDC
    print bcolors.ENDC
    print bcolors.OKBLUE + "Adage: " + bcolors.OKGREEN + working_info[3] + bcolors.ENDC
    print bcolors.OKBLUE + "created by: " + bcolors.OKGREEN + working_info[4] + bcolors.ENDC + " " + \
          bcolors.OKBLUE + "author: " + bcolors.OKGREEN + working_info[5] + bcolors.ENDC
    print bcolors.OKBLUE + "votes: " + bcolors.OKGREEN + working_info[6] + bcolors.ENDC + " " + \
          bcolors.OKBLUE + "karma: " + bcolors.OKGREEN + working_info[7] + bcolors.ENDC
    print bcolors.ENDC


def usage():
    print "Use %s in|out|status|vote [+|-]" % sys.argv[0]


if __name__ == '__main__':
    p = Puncher()

    if len(sys.argv) not in (2, 3):
        usage()

    elif sys.argv[1] == 'in':
        try:
            working_info = p.punch_in()
            print bcolors.OKGREEN + "Punch in done!" + bcolors.ENDC
            print ''

            print_working_info(working_info)
            print_people_working(p.people_working())
        except:
            print bcolors.FAIL + "I couldn't punch in :-/" + bcolors.ENDC

    elif sys.argv[1] == 'out':
        try:
            working_info = p.punch_out()
            print bcolors.OKGREEN + "Punch out done!" + bcolors.ENDC
            print ''

            print_working_info(working_info)
            print_people_working(p.people_working())
        except:
            print bcolors.FAIL + "I couldn't punch out :-/" + bcolors.ENDC

    elif sys.argv[1] == 'vote':
        if len(sys.argv) != 3 or sys.argv[2] not in '+-':
            print bcolors.FAIL + "Unkown vote, use + or - as argument" + bcolors.ENDC
            sys.exit(1)

        if sys.argv[2] == '+':
            p.vote_up()

        elif sys.argv[2] == '-':
            p.vote_down()
        print bcolors.OKGREEN + "Vote sent!" + bcolors.ENDC

    elif sys.argv[1] in ('status', 'st'):
        people_working = None
        is_punched_in = False
        working_info = None

        def fetch_people_working():
            global people_working
            people_working = p.people_working()

        def fetch_working_info():
            global is_punched_in
            global working_info
            working_info = p.working_info()
            is_punched_in = working_info[2]

        threads = [threading.Thread(target=fetch_people_working),
                   threading.Thread(target=fetch_working_info)]
        for t in threads:
            t.start()
        for t in threads:
            t.join()

        print ''
        if is_punched_in:
            print bcolors.OKGREEN + "Punched [IN]" + bcolors.ENDC
        else:
            print bcolors.FAIL + "Punched [OUT]" + bcolors.ENDC
        print ''
        print_working_info(working_info)

        # print what other are doing
        print_people_working(people_working)

    else:
        usage()
